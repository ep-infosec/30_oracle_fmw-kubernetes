<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle Fusion Middleware on Kubernetes</title>
    <link>/fmw-kubernetes/22.2.1/</link>
    <description>Recent content on Oracle Fusion Middleware on Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Apr 2019 06:46:23 -0500</lastBuildDate>
    
	<atom:link href="/fmw-kubernetes/22.2.1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>a. Using Design Console with NGINX(non-SSL)</title>
      <link>/fmw-kubernetes/22.2.1/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/</guid>
      <description>Configure an NGINX ingress (non-SSL) to allow Design Console to connect to your Kubernetes cluster.
  Prerequisites
  Setup routing rules for the Design Console ingress
  Create the ingress
  Update the T3 channel
  Restart the OIG Managed Server
  Design Console client
a. Using an on-premises installed Design Console
b. Using a container image for Design Console
  Login to the Design Console</description>
    </item>
    
    <item>
      <title>Domain life cycle</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/domain-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/domain-lifecycle/</guid>
      <description>View existing OIG servers Starting/Scaling up OIG Managed servers Stopping/Scaling down OIG Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OIG domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.
This document shows the basic operations for starting, stopping and scaling servers in the OIG domain.
For more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/fmw-kubernetes/22.2.1/oam/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/release-notes/</guid>
      <description>Review the latest changes and known issues for Oracle Access Management on Kubernetes.
Recent changes    Date Version Change     April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Access Management domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/fmw-kubernetes/22.2.1/oid/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oid/release-notes/</guid>
      <description>Review the latest changes and known issues for Oracle Internet Directory on Kubernetes.
Recent changes    Date Version Change     April, 2022 22.2.1 Updated for CRI-O support.   October, 2021 21.4.1 Initial release of Oracle Identity Directory on Kubernetes.    </description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/fmw-kubernetes/22.2.1/oig/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/release-notes/</guid>
      <description>Review the latest changes and known issues for Oracle Identity Governance on Kubernetes.
Recent changes    Date Version Change     April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Identity Governance domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/fmw-kubernetes/22.2.1/oud/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oud/release-notes/</guid>
      <description>Review the latest changes and known issues for Oracle Unified Directory on Kubernetes.
Recent changes    Date Version Change     April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.</description>
    </item>
    
    <item>
      <title>Release Notes</title>
      <link>/fmw-kubernetes/22.2.1/oudsm/release-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oudsm/release-notes/</guid>
      <description>Review the latest changes and known issues for Oracle Unified Directory Services Manager on Kubernetes.
Recent changes    Date Version Change     April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.</description>
    </item>
    
    <item>
      <title>b. Using Design Console with NGINX(SSL)</title>
      <link>/fmw-kubernetes/22.2.1/oig/configure-design-console/using-the-design-console-with-nginx-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/configure-design-console/using-the-design-console-with-nginx-ssl/</guid>
      <description>Configure an NGINX ingress (SSL) to allow Design Console to connect to your Kubernetes cluster.
  Prerequisites
  Setup routing rules for the Design Console ingress
  Create the ingress
  Update the T3 channel
  Restart the OIG Managed Server
  Design Console client
a. Using an on-premises installed Design Console
b. Using a container image for Design Console
  Login to the Design Console</description>
    </item>
    
    <item>
      <title>WLST administration operations</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/wlst-admin-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/wlst-admin-operations/</guid>
      <description>Invoke WLST and access Administration Server To use WLST to administer the OIG domain, use a helper pod in the same Kubernetes cluster as the OIG Domain.
  Check to see if the helper pod exists by running:
$ kubectl get pods -n &amp;lt;domain_namespace&amp;gt; | grep helper For example:
$ kubectl get pods -n oigns | grep helper The output should look similar to the following:
helper 1/1 Running 0 26h If the helper pod doesn&amp;rsquo;t exist then see Step 1 in Prepare your environment  to create it.</description>
    </item>
    
    <item>
      <title>Runnning OIG utilities</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/running-oig-utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/running-oig-utilities/</guid>
      <description>Run OIG utlities inside the OIG Kubernetes cluster.
Run utilities in an interactive bash shell   Access a bash shell inside the &amp;lt;domain_uid&amp;gt;-oim-server1 pod:
$ kubectl -n oigns exec -it &amp;lt;domain_uid&amp;gt;-oim-server1 -- bash For example:
$ kubectl -n oigns exec -it governancedomain-oim-server1 -- bash This will take you into a bash shell in the running &amp;lt;domain_uid&amp;gt;-oim-server1 pod:
[oracle@governancedomain-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required.</description>
    </item>
    
    <item>
      <title>Logging and visualization</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/logging-and-visualization/</guid>
      <description>After the OIG domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.
Install Elasticsearch and Kibana   If your domain namespace is anything other than oigns, edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of oigns to your domain namespace.
  Create a Kubernetes secret to access the elasticsearch and kibana container images:
Note: You must first have a user account on hub.</description>
    </item>
    
    <item>
      <title>Monitoring an OIG domain</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/monitoring-oim-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/monitoring-oim-domains/</guid>
      <description>After the OIG domain is set up you can monitor the OIG instance using Prometheus and Grafana. See Monitoring a domain.
The WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.
There are two ways to setup monitoring and you should choose one method or the other:</description>
    </item>
    
    <item>
      <title>Delete the OIG domain home</title>
      <link>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/delete-domain-home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/manage-oig-domains/delete-domain-home/</guid>
      <description>Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.
  Run the following command to delete the domain:
$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d &amp;lt;domain_uid&amp;gt; For example:
$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d governancedomain   Drop the RCU schemas as follows:
$ kubectl exec -it helper -n &amp;lt;domain_namespace&amp;gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=&amp;lt;db_host.</description>
    </item>
    
    <item>
      <title>Patch and Upgrade</title>
      <link>/fmw-kubernetes/22.2.1/oid/patch-and-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oid/patch-and-upgrade/</guid>
      <description>Introduction In this section the Oracle Internet Directory (OID) deployment is updated with a new OID container image.
Note: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.
You can update the deployment with a new OID container image using one of the following methods:
 Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:</description>
    </item>
    
    <item>
      <title>Patch and Upgrade</title>
      <link>/fmw-kubernetes/22.2.1/oud/patch-and-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oud/patch-and-upgrade/</guid>
      <description>Introduction In this section the Oracle Unified Directory (OUD) deployment is updated with a new OUD container image.
Note: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.
You can update the deployment with a new OUD container image using one of the following methods:
 Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:</description>
    </item>
    
    <item>
      <title>Patch and Upgrade</title>
      <link>/fmw-kubernetes/22.2.1/oudsm/patch-and-upgrade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oudsm/patch-and-upgrade/</guid>
      <description>Introduction In this section the Oracle Unified Directory Services Manager (OUDSM) deployment is updated with a new OUDSM container image.
Note: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.
You can update the deployment with a new OUDSM container image using one of the following methods:
 Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:</description>
    </item>
    
    <item>
      <title>a) Scaling Up/Down OID Pods </title>
      <link>/fmw-kubernetes/22.2.1/oid/manage-oid-containers/scaling-up-down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oid/manage-oid-containers/scaling-up-down/</guid>
      <description>Introduction This section describes how to increase or decrease the number of OID pods in the Kubernetes deployment.
View existing OID pods By default the oid helm chart deployment starts two pods: oidhost1 and oidhost2.
The number of pods started is determined by the replicaCount, which is set to 1 by default. A value of 1 starts the two pods above.
To scale up or down the number of OID pods, set replicaCount accordingly.</description>
    </item>
    
    <item>
      <title>a) Scaling Up/Down OUD Pods </title>
      <link>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/scaling-up-down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/scaling-up-down/</guid>
      <description>Introduction This section describes how to increase or decrease the number of OUD pods in the Kubernetes deployment.
View existing OUD pods By default the oud-ds-rs helm chart deployment starts three pods: oud-ds-rs-0 and two replica pods oud-ds-rs-1 and oud-ds-rs-2.
The number of pods started is determined by the replicaCount, which is set to 2 by default. A value of 2 starts the three pods above.
To scale up or down the number of OUD pods, set replicaCount accordingly.</description>
    </item>
    
    <item>
      <title>a) Scaling Up/Down OUDSM Pods </title>
      <link>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/scaling-up-down/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/scaling-up-down/</guid>
      <description>Introduction This section describes how to increase or decrease the number of OUDSM pods in the Kubernetes deployment.
View existing OUDSM pods By default the oudsm helm chart deployment starts one pod: oudsm-1.
The number of pods started is determined by the replicaCount, which is set to 1 by default. A value of 1 starts the pod above.
To scale up or down the number of OUDSM pods, set replicaCount accordingly.</description>
    </item>
    
    <item>
      <title>a. Domain Life Cycle</title>
      <link>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/domain-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/domain-lifecycle/</guid>
      <description>View existing OAM servers Starting/Scaling up OAM Managed servers Stopping/Scaling down OAM Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OAM domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.
This document shows the basic operations for starting, stopping and scaling servers in the OAM domain.
For more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.</description>
    </item>
    
    <item>
      <title>a. Patch an image</title>
      <link>/fmw-kubernetes/22.2.1/oam/patch-and-upgrade/patch_an_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/patch-and-upgrade/patch_an_image/</guid>
      <description>Choose one of the following options to update your OAM kubernetes cluster to use the new image:
 Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the WebLogic Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OAM Managed Servers.
Note: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>a. Patch an image</title>
      <link>/fmw-kubernetes/22.2.1/oig/patch-and-upgrade/patch_an_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/patch-and-upgrade/patch_an_image/</guid>
      <description>Choose one of the following options to update your OIG kubernetes cluster to use the new image:
 Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the WebLogic Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OIG Managed Servers.
Note: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.</description>
    </item>
    
    <item>
      <title>a. Post Install Tasks</title>
      <link>/fmw-kubernetes/22.2.1/oig/post-install-config/set_oimfronendurl_using_mbeans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/post-install-config/set_oimfronendurl_using_mbeans/</guid>
      <description>Follow these post install configuration steps.
 Create a Server Overrides File Set OIMFrontendURL using MBeans  Create a Server Overrides File   Navigate to the following directory:
cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain   Create a setUserOverrides.sh with the following contents:
DERBY_FLAG=false JAVA_OPTIONS=&amp;quot;${JAVA_OPTIONS} -Djava.net.preferIPv4Stack=true&amp;quot; MEM_ARGS=&amp;quot;-Xms8192m -Xmx8192m&amp;quot;   Copy the setUserOverrides.sh file to the Administration Server pod:
$ chmod 755 setUserOverrides.sh $ kubectl cp setUserOverrides.sh oigns/governancedomain-adminserver:/u01/oracle/user_projects/domains/governancedomain/bin/setUserOverrides.sh Where oigns is the OIG namespace and governancedomain is the domain_UID.</description>
    </item>
    
    <item>
      <title>a. Using an Ingress with NGINX (non-SSL)</title>
      <link>/fmw-kubernetes/22.2.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/</guid>
      <description>Setting up an ingress for NGINX for the OIG domain on Kubernetes (non-SSL) The instructions below explain how to set up NGINX as an ingress for the OIG domain with non-SSL termination.
Note: All the steps below should be performed on the master node.
  Install NGINX
a. Configure the repository
b. Create a namespace
c. Install NGINX using helm
d. Setup routing rules for the domain
  Create an ingress for the domain</description>
    </item>
    
    <item>
      <title>b) Logging and Visualization for Helm Chart oud-ds-rs Deployment</title>
      <link>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/logging-and-visualization/</guid>
      <description>Introduction Installation  Create a Kubernetes secret Enable Elasticsearch, Logstash, and Kibana Upgrade OUD deployment with ELK configuration Verify the pods   Verify using the Kibana application  Introduction This section describes how to install and configure logging and visualization for the oud-ds-rs Helm chart deployment.
The ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK you can gain insights in real-time from the log data from your applications.</description>
    </item>
    
    <item>
      <title>b) Logging and Visualization for Helm Chart oudsm Deployment</title>
      <link>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/logging-and-visualization/</guid>
      <description>Introduction Installation  Create a Kubernetes secret Enable Elasticsearch, Logstash, and Kibana Upgrade OUDSM deployment with ELK configuration Verify the pods   Verify using the Kibana application  Introduction This section describes how to install and configure logging and visualization for the oudsm Helm Chart deployment.
The ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK we can gain insights in real-time from the log data from your applications.</description>
    </item>
    
    <item>
      <title>b. Install and configure connectors</title>
      <link>/fmw-kubernetes/22.2.1/oig/post-install-config/install_and_configure_connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/post-install-config/install_and_configure_connectors/</guid>
      <description>Download the connector   Download the Connector you are interested in from Oracle Identity Manager Connector Downloads.
  Copy the connector zip file to a staging directory on the master node e.g. &amp;lt;workdir&amp;gt;/stage and unzip it:
$ cp $HOME/Downloads/&amp;lt;connector&amp;gt;.zip &amp;lt;workdir&amp;gt;/&amp;lt;stage&amp;gt;/ $ cd &amp;lt;workdir&amp;gt;/&amp;lt;stage&amp;gt; $ unzip &amp;lt;connector&amp;gt;.zip $ chmod -R 755 * For example:
$ cp $HOME/Downloads/Exchange-12.2.1.3.0.zip /scratch/OIGK8S/stage/ $ cd /scratch/OIGK8S/stage/ $ unzip exchange-12.2.1.3.0.zip $ chmod -R 755 *   Copy OIG connectors There are two options to copy OIG Connectors to your Kubernetes cluster:</description>
    </item>
    
    <item>
      <title>b. Upgrade an operator release</title>
      <link>/fmw-kubernetes/22.2.1/oam/patch-and-upgrade/upgrade_an_operator_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/patch-and-upgrade/upgrade_an_operator_release/</guid>
      <description>These instructions apply to upgrading the operator within the 3.x release family as additional versions are released.
  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:
$ mkdir &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X $ cd &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v3.X.X For example:
$ mkdir /scratch/OAMK8S/weblogic-kubernetes-operator-3.X.X $ cd /scratch/OAMK8S/weblogic-kubernetes-operator-3.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v3.X.X This will create the directory &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X/weblogic-kubernetes-operator
  Run the following helm command to upgrade the operator:</description>
    </item>
    
    <item>
      <title>b. Upgrade an operator release</title>
      <link>/fmw-kubernetes/22.2.1/oig/patch-and-upgrade/upgrade_an_operator_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/patch-and-upgrade/upgrade_an_operator_release/</guid>
      <description>These instructions apply to upgrading operators within the 3.x release family as additional versions are released.
  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:
$ mkdir &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X $ cd &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v3.X.X For example:
$ mkdir /scratch/OIGK8S/weblogic-kubernetes-operator-3.X.X $ cd /scratch/OIGK8S/weblogic-kubernetes-operator-3.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v3.X.X This will create the directory &amp;lt;workdir&amp;gt;/weblogic-kubernetes-operator-3.X.X/weblogic-kubernetes-operator
  Run the following helm command to upgrade the operator:</description>
    </item>
    
    <item>
      <title>b. Using an Ingress with NGINX (SSL)</title>
      <link>/fmw-kubernetes/22.2.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/</guid>
      <description>Setting up an ingress for NGINX for the OIG domain on Kubernetes The instructions below explain how to set up NGINX as an ingress for the OIG domain with SSL termination.
Note: All the steps below should be performed on the master node.
  Create a SSL certificate
a. Generate SSL certificate
b. Create a Kubernetes secret for SSL
  Install NGINX
a. Configure the repository
b. Create a namespace</description>
    </item>
    
    <item>
      <title>b. WLST Administration Operations</title>
      <link>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/wlst-admin-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/wlst-admin-operations/</guid>
      <description>To use WLST to administer the OAM domain, use the helper pod in the same Kubernetes cluster as the OAM Domain.
  Check to see if the helper pod exists by running:
$ kubectl get pods -n &amp;lt;domain_namespace&amp;gt; | grep helper For example:
$ kubectl get pods -n oamns | grep helper The output should look similar to the following:
helper 1/1 Running 0 26h If the helper pod doesn&amp;rsquo;t exist then see Step 1 in Prepare your environment  to create it.</description>
    </item>
    
    <item>
      <title>c) Monitoring an Oracle Internet Directory Instance</title>
      <link>/fmw-kubernetes/22.2.1/oid/manage-oid-containers/monitoring-oid-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oid/manage-oid-containers/monitoring-oid-instance/</guid>
      <description>Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana objects created Add the NodePort   Verify using Grafana GUI  Introduction After the Oracle Internet Directory instance (OID) is set up you can monitor it using Prometheus and Grafana.
Install Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment.</description>
    </item>
    
    <item>
      <title>c) Monitoring an Oracle Unified Directory Instance</title>
      <link>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/monitoring-oud-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oud/manage-oud-containers/monitoring-oud-instance/</guid>
      <description>Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana objects created Add the NodePort   Verify using Grafana GUI  Introduction After the Oracle Unified Directory instance (OUD) is set up you can monitor it using Prometheus and Grafana.
Install Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment.</description>
    </item>
    
    <item>
      <title>c) Monitoring an Oracle Unified Directory Services Manager Instance</title>
      <link>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/</guid>
      <description>Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana Objects Created Add the NodePort   Verify Using Grafana GUI  Introduction After the Oracle Unified Directory Services Manager instance is set up you can monitor it using Prometheus and Grafana.
Install Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment.</description>
    </item>
    
    <item>
      <title>c. Logging and Visualization</title>
      <link>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/logging-and-visualization/</guid>
      <description>After the OAM domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.
Install Elasticsearch and Kibana   If your domain namespace is anything other than oamns, edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of oamns to your domain namespace.
  Create a Kubernetes secret to access the Elasticsearch and Kibana container images:
Note: You must first have a user account on hub.</description>
    </item>
    
    <item>
      <title>d. Monitoring an OAM domain</title>
      <link>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/monitoring-oam-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/monitoring-oam-domains/</guid>
      <description>After the OAM domain is set up you can monitor the OAM instance using Prometheus and Grafana. See Monitoring a domain.
The WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.
There are two ways to setup monitoring and you should choose one method or the other:</description>
    </item>
    
    <item>
      <title>e. Delete the OAM domain home</title>
      <link>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/delete-domain-home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/22.2.1/oam/manage-oam-domains/delete-domain-home/</guid>
      <description>Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.
  Run the following command to delete the domain:
$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d &amp;lt;domain_uid&amp;gt; For example:
$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d accessdomain   Drop the RCU schemas as follows:
$ kubectl exec -it helper -n &amp;lt;domain_namespace&amp;gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=&amp;lt;db_host.</description>
    </item>
    
  </channel>
</rss>